<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ReplyMapper">
 	
 	
	<resultMap id="replySelectMap" type="com.wthealth.domain.Reply">
		<result property="replyNo" 			column="reply_no" 			jdbcType="NUMERIC"/>
		<result property="parentReplyNo"	column="parent_reply_no" 		jdbcType="NUMERIC" />
		<result property="reReplyNo" 	column="rereply_no" 		jdbcType="NUMERIC" />
		<result property="replyDate" 				column="reply_date" 					jdbcType="DATE" />
		<result property="postNo" 				column="post_no" 					jdbcType="VARCHAR" />
		<result property="text" 			column="text" 		jdbcType="VARCHAR" />
		<result property="writerId" 				column="writer_id" 					jdbcType="VARCHAR" />
		<result property="blindStatus" 			column="blind_status" 				jdbcType="VARCHAR"  />
		<result property="deleteStatus" 		column="delete_status" 			jdbcType="VARCHAR" />
		<result property="postTitle" 		column="title" 			jdbcType="VARCHAR" />
		<result property="category" 		column="category" 			jdbcType="VARCHAR" />
		<result property="userImage" 		column="user_image" 			jdbcType="VARCHAR" />
		<result property="nickname" 		column="nickname" 			jdbcType="VARCHAR" />
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="addReply"		parameterType="com.wthealth.domain.Reply" useGeneratedKeys="true" keyProperty="replyNo" >
	 	INSERT
		INTO reply ( reply_no , parent_reply_no, rereply_no , reply_date , post_no, text, writer_id, blind_status , delete_status) 
		VALUES	 (	seq_reply_reply_no.nextval, seq_reply_reply_no.currval, '0', SYSDATE, #{postNo} , 
							#{text} , #{writerId} , #{blindStatus:VARCHAR} , #{deleteStatus:VARCHAR})
		<selectKey resultType="int" keyProperty = "replyNo" order="AFTER">
			SELECT seq_reply_reply_no.currval FROM dual
		</selectKey>
	</insert>
	 
	 <!-- SQL : INSERT -->
	<insert 	id="addReReply"		parameterType="com.wthealth.domain.Reply"  useGeneratedKeys="true" keyProperty="replyNo" >
	 	INSERT
		INTO reply ( reply_no , parent_reply_no , rereply_no , reply_date , post_no, text, writer_id, blind_status , delete_status) 
		VALUES	 (	seq_reply_reply_no.nextval, #{parentReplyNo} , '1', SYSDATE, #{postNo} , 
							#{text} , #{writerId} , #{blindStatus:VARCHAR} , #{deleteStatus:VARCHAR})
		<selectKey resultType="int" keyProperty = "replyNo" order="AFTER">
			SELECT seq_reply_reply_no.currval FROM dual
		</selectKey>
	 </insert>
	 
	  <!-- SQL : UPDATE -->
	 <update	id="updateReply"	parameterType="com.wthealth.domain.Reply" >
	   	UPDATE reply
	   	<set>
	   		text = #{text}
	   	</set>
	   	WHERE reply_no = #{replyNo}
	 </update>
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getReply"	parameterType="int"	resultMap="replySelectMap">
		SELECT
		reply_no , parent_reply_no , rereply_no , reply_date , post_no, text, writer_id, blind_status , delete_status
		FROM reply 
		WHERE reply_no = #{value}
	 </select>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="deleteReply"	parameterType="int" >
	   	UPDATE reply
	   	<set>
	   		delete_status = '1'
	   	</set>
	   	WHERE reply_no = #{value}
	 </update>
	 
	 <!-- SQL : UPDATE -->
	 <!-- <update	id="deleteReReply"	parameterType="int" >
	   	UPDATE reply
	   	<set>
	   		delete_status = '1'
	   	</set>
	   	WHERE reply_no = #{value}
	 </update> -->
		 
	<!-- SQL : SELECT LIST -->
<!-- 	<select  id="listReply"  parameterType="map"	resultMap="replySelectMap">
	  	SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT reply_no , parent_reply_no , rereply_no , reply_date , post_no, text, writer_id, blind_status , delete_status
											FROM reply
											WHERE post_No = #{postNo} and delete_status != '1'
											ORDER BY parent_reply_no, reply_no
									 	) inner_table
						WHERE ROWNUM &lt;= #{search.endRowNum} )
		WHERE row_seq BETWEEN #{search.startRowNum} AND #{search.endRowNum} 
	 </select> -->
	 
	 <!-- SQL : SELECT LIST -->
	<select  id="listReply"  parameterType="int"	resultMap="replySelectMap">
	  	SELECT r.reply_no , r.parent_reply_no , r.rereply_no , r.reply_date , r.post_no, text, r.writer_id, r.blind_status , r.delete_status, u.user_image, u.nickname
											FROM reply r, users u
											WHERE r.post_No = #{postNo} AND r.writer_id = u.user_id<!-- AND delete_status IS NULL OR delete_status='0'    -->
											ORDER BY r.parent_reply_no, r.reply_no
	 </select>
	 
	 <!-- SQL : SELECT LIST -->
	<select  id="listMyReply"  parameterType="map"	resultMap="replySelectMap">
	  	SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT r.reply_no , r.parent_reply_no , r.rereply_no , r.reply_date , r.post_no, r.text, r.writer_id, r.blind_status , r.delete_status, p.title, p.category
											FROM reply r, post p
											WHERE r.writer_id = #{writerId} AND r.post_no = p.post_no
											ORDER BY r.reply_no DESC
											 ) inner_table
						WHERE ROWNUM &lt;= #{search.endRowNum} )
		WHERE row_seq BETWEEN #{search.startRowNum} AND #{search.endRowNum} 
	 </select>
	 	<!--  위 두번째 subQuery 의  
	 			WHERE ROWNUM &lt;= #{endRowNum} ) 는
	 			WHERE ROWNUM <= #{endRowNum} ) 의미이며..
	 			< 는 keyword 로 &lt; 를	사용.
	 			
	 			<![CDATA[  ~~~  ]]> 를 이용하여 아래와 같이 사용  할 수 있다.
	 			CDATA ==> Character Data 의 의미 Java 에서 \n 같은 특수문자 처리  

				WHERE ROWNUM <![CDATA[ <=]]> #{endRowNum} )
		-->
	
	<!-- SQL : SELECT ROW Count -->	 
	 <select  id="getTotalCount"  parameterType="String"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM(	SELECT r.reply_no , r.parent_reply_no , r.rereply_no , r.reply_date , r.post_no, text, r.writer_id, r.blind_status , r.delete_status, u.user_image
											FROM reply r, users u
											WHERE r.post_No = #{postNo} AND r.writer_id = u.user_id <!-- AND delete_status IS NULL OR delete_status= '0' -->
					 ) countTable						
	 </select>
	 
	 <!-- SQL : SELECT ROW Count -->	 
	 <select  id="getTotalCountMyList"  parameterType="String"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM(	SELECT r.reply_no , r.parent_reply_no , r.rereply_no , r.reply_date , r.post_no, r.text, r.writer_id, r.blind_status , r.delete_status, p.title, p.category
											FROM reply r, post p
											WHERE r.writer_id = #{writerId} AND r.post_no = p.post_no
											ORDER BY r.reply_no DESC
					 ) countTable						
	 </select>
	 
</mapper>